h2. s3backup

h3. TOC

* "Introduction":#intro
* "Set up":#setup
* "Issues and TODO":#issues

h3(#intro). Introduction

s3backup is a collection of utilities to generate automatic cloud backups (scheduled via cron). The bucket / key naming system is such that multiple machines at multiple locations can be backed up and easily organized.

Data security is not yet fully implemented - transfers are encrypted via TLS, but encrypting the archive before transfer has not yet been implemented.

h3(#setup). Set up

s3backup requires boto to run -

bq. $ virtualenv<br />$ pip install boto

All system configuration is in config.py - set your AWS access and secret key, directories, and a few settings.

bq. Set aws_access_key_id and aws_secret_key to your account keys.

If you're installing this on public or psuedo-public computers, create sub-accounts and use those keys for security. Also manage access permissions from AWS - s3backup doesn't yet do this.

bq. Enter your bucket name and machine name.

s3bucket organizes uploads to effectively organize backups from multiple machines across multiple locations. The bucket name must be unique across all of AWS. If you only backup one machine the machine name is unimportant (enter something; I haven't tested it with None.

bq. Next create the backup lists and point the list variables to it - the comments in the code explain this step.

bq. Set the directory to store the archive in.

If you're keeping a local copy, specify its intended location. Otherwise, it's fine to keep it in /tmp.

bq. Set a few miscellaneous settings.

use_archive must be True for now.
compression_method can be one of 'none', 'gz', or 'bz2' (default)
Set delete_archive_when_finished to True if you don't want to keep a local copy of the archive

A restore tool does not yet exist - all restores must occur manually.

h3(#issues). Issues and TODO

* System logging
* Configuration file instead of storing settings in code
* Encrypt archive / files before upload
* Write an automatic restore / guided restore tool
* Test on Windows
* Test on symbolic links
** Setting to determine whether to follow links
* Create cron scheduling guide (Win: Task Manager)
* Implement zip compression
* Some error handling routines need implemented
* s3backup.py needs to handle non-archive uploads
